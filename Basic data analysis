miriam <- read.csv(file.choose())
miriam
ols=lm(ROA~ROE+TOBIN,data = miriam)
ols
summary(ols)
#DAY2
dat<-iris #Load the dataset and name it dat
dat       #View dataset
head(dat)  #first 6 observations
summary(dat) # descriptive statistics
min(dat$Sepal.Length)
max(dat$Sepal.Width)
mean(dat$Sepal.Length)
library(pastecs)     #package for more descriptive statistic
stat.desc(dat)   #More descriptive statistics
stat.desc(dat$Sepal.Length)
sd(dat$Sepal.Length)
var(dat$Sepal.Length)
library(ggplot2)
hist(dat$Sepal.Length)
hist(dat$Sepal.Width,col="red")
library(lattice)
dotplot(dat$Sepal.Width~dat$Sepal.Length)
library (car)
library(MASS)
mimie=(str(Cars93)) #string values inside
#creating a data frame
car.data<-data.frame(Cars93$AirBags, Cars93$Type)
#creating tables
car.data<-table(Cars93$AirBags, Cars93$Type)
car.data
#perform a chi square test
print(chisq.test(car.data))
#creating relationship models without existing data set
x<-c(151,174,138,186,128,136,179,163,152,131)
y<-c(63,81,56,91,47,57,76,72,62,48)
z<-c(14, 17, 25, 80, 86, 120, 45, 55, 77,99)
mydata<-data.frame(x,y,z)
mydata
mydata1<-table(mydata)
mydata1
#linear models
mmodel=lm(y~x+z,data=mydata)
mmodel
summary(mmodel)
#Graph
plot(x,y,col="blue", main="height& weight",abline(lm(x~y)), cex=1.3, pch=16,xlab="weight in kg", ylab="height in cm")
plot(x,y,col="blue", main="height& weight",abline(lm(x~y)), xlab="weight in kg", ylab="height in cm")
#correlation analysis using the function cor
cor(x,y)
cor(x,y, method = "kendall")
#when there is missing data
cor(x,y, methods="pearson", use="complete.obs")
miriam <- read.csv(file.choose())
y
# preparing the working environment
rm(list = ls())
# installing needed packages
install.packages("dplyr")
library(dplyr)
install.packages("lubridate")
library(lubridate)
install.packages("tidyverse")
library(tidyverse)


#setting the working directory
setwd ("C:\\Chisquares\\renv")

#Loading the data
covid <- read.csv(file.choose())

# Number of row
nrow(covid)

#Number of colums
ncol(covid)

# Number of missing variables
print("position of missing values")
which(is.na(covid)) 

# find location of missing values column wise
print("Position of missing values by column wise")
sapply(covid, function(x) which(is.na(x))) 

# count the missing values by column wise
print("Count of missing values by column wise")
sapply(covid, function(x) sum(is.na(x)))

# Number of unique countires
n_distinct(covid$countriesAndTerritories)

# Number of cases by date

#working with dates
pacman::p_load(
  lubridate,  # general package for handling and converting dates  
  parsedate,   # has function to "guess" messy dates
  aweek,      # another option for converting dates to weeks, and weeks to dates
  zoo,        # additional date/time functions
  tidyverse,  # data management and visualization  
  rio)        # data import/export

summary(mydata)
table(mydata$Sex)
colnames(mydata) <- c(
  "Age",
  "Sex", 
  # 2 = female, 1 = male
  "Weight",
  "Height",
  "BMI",
  "Systolic.BP",
  "Distolic.BP",
  "Heart.Rate",
  "Blood.Glucose",
  "Pulse", 
  # 1 = Unhealthy, 2 = Healthy
  "Hypertension", 
  # 1 = Not Hypertensive, 2 = Hypertensive
  "diabetes", 
  # 1 = Not Dibetic, 2 = Dibetic
  "Bodymass", 
  # 1 =healthy, 2 = Overweight, 3=Obese
  "CVD", 
  # 0 = absent, 1 = present
  "age",
  # 1=Children, 2=Adolescents, 3=Adults, 4=Older Adults
  "sys",
  # 1=optimal, 2=normal, 3=high normal, 4= G1 hyp, 5= G2 hyp, 6= G2 hyp
  "dia",
  # 1=optimal, 2=normal, 3=high normal, 4= G1 hyp, 5= G2 hyp, 6= G2 hyp
  
  mydata$Sex <- as.factor(mydata$Sex)
  mydata$Hypertension <- as.factor(mydata$Hypertension)
  mydata$diabetes <- as.factor(mydata$diabetes)
  mydata$CVD <- as.factor(mydata$CVD)
  mydata$Pulse <- as.factor(mydata$Pulse)
  mydata$Bodymass <- as.factor(mydata$Bodymass)
  mydata$Blood.Glucose <- as.numeric(mydata$Blood.Glucose)
  mydata$TCVD <- as.factor(mydata$TCVD)
  mydata$age <- as.factor(mydata$age)
  mydata$dia <- as.factor(mydata$dia)
  mydata$sys <- as.factor(mydata$sys)
  
  mydata$Sex <- factor(mydata$Sex, levels = c(1,2),
                       labels = c("Male", "Female"))
  mydata$Hypertension <- factor(mydata$Hypertension, levels = c(1,2),
                                labels = c("Not hypertensive", "Hypertensive"))
  mydata$diabetes <- factor(mydata$diabetes, levels = c(1,2),
                            labels = c("Not dibetic", "dibetic"))
  mydata$CVD <- factor(mydata$CVD, levels = c(0,1),
                       labels = c("absent", "present"))
  mydata$Pulse <- factor(mydata$Pulse, levels = c(1,2),
                         labels = c("unhealthy", "healthy"))
  mydata$Bodymass <- factor(mydata$Bodymass, levels = c(1,2,3),
                            labels = c("healthy", "over weight", "obese"))
  mydata$age <- factor(mydata$age, levels = c(1,2,3,4),
                       labels = c("children", "adolescent", "adult", "older adult"))
  mydata$sys <- factor(mydata$sys, levels = c(1,2,3,4,5,6),
                       labels = c("optimal", "normal", "high normal", "G1 hyp", "G2 hyp", "G2 hyp"))
  mydata$dia <- factor(mydata$dia, levels = c(1,2,3,4,5,6),
                       labels = c("optimal", "normal", "high normal", "G1 hyp", "G2 hyp", "G2 hyp"))
  
  table(mydata$age)
  xtabs(~ CVD + Sex, data=mydata)
  xtabs(~ CVD + Hypertension, data=mydata)
  xtabs(~ CVD + diabetes, data=mydata)
  xtabs(~ CVD + Pulse, data=mydata)
  xtabs(~ CVD + Bodymass, data=mydata)
  xtabs(~ CVD + age, data=mydata)
  
  model <- glm(CVD~age+Sex+Bodymass+Pulse+Hypertension+diabetes+sys+dia, family="binomial", data=mydata)
  summary(model)
  
  #Use 70% of dataset as training set and remaining 30% as testing set
  sample <- sample(c(TRUE, FALSE), nrow(mydata), replace=TRUE, prob=c(0.7,0.3))
  train <- mydata[sample, ]
  test <- mydata[!sample, ]
  
  model_1 <- glm(CVD~age+Sex+Bodymass+Pulse+Hypertension+diabetes, family="binomial", data=train)
  summary(model_1)
  options(scipen=999)
  summary(model_1)
  pscl::pR2(model)["McFadden"]
  caret::varImp(model)
  car::vif(model)
  predicted <- predict(model_1, test, type="response")
  predict(model_1, test, type="response")
  
  # Variable Importance Plot
  varImpPlot(rf_model)
  # Predictions on the same dataset
  data_predictions <- predict(rf_model, newdata = test)
  # Print or inspect the predictions
  print(data_predictions)
  
